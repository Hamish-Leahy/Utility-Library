import concurrent.futures
import time

def do_task(task_id):
    # Simulate some computational work
    time.sleep(1)
    return f"Task {task_id} completed."

def main():
    num_tasks = 10

    # Using ThreadPoolExecutor to execute the tasks concurrently
    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
        # Submit the tasks to the executor
        future_to_task = {executor.submit(do_task, i): i for i in range(num_tasks)}

        # Wait for the tasks to complete
        for future in concurrent.futures.as_completed(future_to_task):
            task_id = future_to_task[future]
            try:
                result = future.result()
                print(result)
            except Exception as e:
                print(f"Task {task_id} failed: {e}")

if __name__ == "__main__":
    main()
